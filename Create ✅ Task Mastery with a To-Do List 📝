import tkinter as tk
from tkinter import messagebox
import os

class ToDoApp:
    def __init__(self, root):
        self.root = root
        self.root.title("To-Do List Manager")
        self.root.geometry("600x600")

        self.tasks = []
        self.load_tasks()

        # Frame for the task list and buttons
        self.frame = tk.Frame(self.root)
        self.frame.pack(pady=20)

        # Listbox to display tasks
        self.listbox = tk.Listbox(self.frame, height=20, width=80, selectmode=tk.SINGLE)
        self.listbox.pack(side=tk.LEFT, fill=tk.BOTH)

        # Scrollbar for the listbox
        self.scrollbar = tk.Scrollbar(self.frame)
        self.scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        self.listbox.config(yscrollcommand=self.scrollbar.set)
        self.scrollbar.config(command=self.listbox.yview)

        # Entry widget to input new tasks
        self.task_entry = tk.Entry(self.root, width=30)
        self.task_entry.pack(pady=10)

        # Buttons for adding, removing, and editing tasks
        self.add_button = tk.Button(self.root, text="Add Task", width=15, command=self.add_task)
        self.add_button.pack(pady=5)

        self.remove_button = tk.Button(self.root, text="Remove Task", width=15, command=self.remove_task)
        self.remove_button.pack(pady=5)

        self.edit_button = tk.Button(self.root, text="Edit Task", width=15, command=self.edit_task)
        self.edit_button.pack(pady=5)

        self.done_button = tk.Button(self.root, text="Mark as Done", width=15, command=self.mark_done)
        self.done_button.pack(pady=5)

    def add_task(self):
        task = self.task_entry.get().strip()
        if task != "":
            self.tasks.append({"task": task, "done": False})
            self.update_task_listbox()
            self.task_entry.delete(0, tk.END)
            self.save_tasks()
        else:
            messagebox.showwarning("Input Error", "Task cannot be empty")

    def remove_task(self):
        try:
            selected_task_index = self.listbox.curselection()[0]
            del self.tasks[selected_task_index]
            self.update_task_listbox()
            self.save_tasks()
        except IndexError:
            messagebox.showwarning("Selection Error", "No task selected to remove")

    def edit_task(self):
        try:
            selected_task_index = self.listbox.curselection()[0]
            task = self.tasks[selected_task_index]["task"]
            new_task = self.task_entry.get().strip()
            if new_task != "":
                self.tasks[selected_task_index]["task"] = new_task
                self.update_task_listbox()
                self.task_entry.delete(0, tk.END)
                self.save_tasks()
            else:
                messagebox.showwarning("Input Error", "Task cannot be empty")
        except IndexError:
            messagebox.showwarning("Selection Error", "No task selected to edit")

    def mark_done(self):
        try:
            selected_task_index = self.listbox.curselection()[0]
            self.tasks[selected_task_index]["done"] = True
            self.update_task_listbox()
            self.save_tasks()
        except IndexError:
            messagebox.showwarning("Selection Error", "No task selected to mark as done")

    def update_task_listbox(self):
        self.listbox.delete(0, tk.END)
        for task in self.tasks:
            task_text = task["task"]
            if task["done"]:
                task_text = f"{task_text} (Done)"
            self.listbox.insert(tk.END, task_text)

    def save_tasks(self):
        with open("tasks.txt", "w") as f:
            for task in self.tasks:
                done_status = "done" if task["done"] else "not_done"
                f.write(f"{task['task']}|{done_status}\n")

    def load_tasks(self):
        if os.path.exists("tasks.txt"):
            with open("tasks.txt", "r") as f:
                for line in f:
                    task, status = line.strip().split("|")
                    self.tasks.append({"task": task, "done": status == "done"})


if __name__ == "__main__":
    root = tk.Tk()
    app = ToDoApp(root)
    root.mainloop()
